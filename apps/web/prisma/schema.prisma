// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(uuid())
  name     String?
  email    String  @unique
  password String?

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  schools      School[]
  used_invites Invite[]

  @@map("users")
}

model School {
  id   String @id @default(uuid())
  name String

  useLetterSystem Boolean @default(false)

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  users      User[]
  invites    Invite[]
  exams      Exam[]
  students   Student[]
  classrooms Classroom[]

  @@map("schools")
}

model Classroom {
  id   String @id @default(uuid())
  name String

  school   School    @relation(fields: [schoolId], references: [id])
  students Student[]
  schoolId String

  @@map("classrooms")
}

model Exam {
  id    String @id @default(uuid())
  title String

  school School @relation(fields: [schoolId], references: [id])

  mean              Float
  examined_students Student[]

  grades    Grade[]
  max_grade Float
  min_grade Float

  schoolId String

  @@map("exams")
}

model Student {
  id    String @id @default(uuid())
  name  String
  email String @unique

  school    School      @relation(fields: [schoolId], references: [id])
  exams     Exam[]
  grades    Grade[]
  classroom Classroom[]

  schoolId String

  @@map("students")
}

model Grade {
  id        String  @id @default(uuid())
  exam      Exam?   @relation(fields: [examId], references: [id])
  refers_to Student @relation(fields: [studentId], references: [id])

  score String

  examId    String?
  studentId String

  @@map("grades")
}

model Invite {
  id   String @id @default(uuid())
  code String @default(uuid())

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  school School @relation(fields: [schoolId], references: [id])

  is_used Boolean @default(false)
  used_by User?   @relation(fields: [userId], references: [id])

  schoolId String
  userId   String?

  @@map("invites")
}
