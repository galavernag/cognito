// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  schools School[]

  createdInvites  Invite[]
  createdStudents Student[]
  createdTests    Test[]
  assignedGrades  Grade[]

  @@map("users")
}

model School {
  id        String   @id @default(uuid())
  name      String
  domain    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  invites Invite[]

  members User[]
  classes Class[]

  @@map("schools")
}

model Student {
  id   String @id @default(uuid())
  name String @unique

  createdBy User   @relation(fields: [userId], references: [id])
  userId    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  classes Class[]
  grades  Grade[]

  @@map("students")
}

model Test {
  id   String @id @default(uuid())
  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBY User?   @relation(fields: [userId], references: [id])
  userId    String?

  classes Class[]
  grades  Grade[]

  @@map("tests")
}

model Grade {
  id     String @id @default(uuid())
  test   Test   @relation(fields: [testId], references: [id])
  testId String

  student   Student @relation(fields: [studentId], references: [id])
  studentId String

  grade Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy User     @relation(fields: [userId], references: [id])
  userId    String

  @@map("grades")
}

model Class {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  school   School @relation(fields: [schoolId], references: [id])
  schoolId String

  students Student[]
  tests    Test[]

  @@map("classes")
}

model Invite {
  id   String @id @default(uuid())
  code String @unique @default(cuid())

  createdAt DateTime @default(now())
  createdBy User     @relation(fields: [userId], references: [id])

  expiresAt DateTime
  isUsed    Boolean  @default(false)

  userId String
  school School @relation(fields: [schoolId], references: [id])

  schoolId String

  @@map("invites")
}
